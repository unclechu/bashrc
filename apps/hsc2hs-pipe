#! /usr/bin/env perl
#
# Wrapper for hsc2hs to compile '*.hsc' to '*.hs' but writing result directly
# to stdout instead of file.
#
# Also it can read source file from stdin by '--pipe-in' flag.
#
# Useful for debugging in Vim (`:!hsc2hs-pipe`).
#

use v5.10; use strict; use warnings; use autodie qw(:all);

use IPC::System::Simple qw(runx);
use File::Temp ();

# default values
my $is_input_piped = 0;
my $is_output_piped = 1;

my @args_to_hsc2hs = ();
foreach (@ARGV) {
	if ($_ eq '--pipe-in') {$is_input_piped = 1}
	elsif ($_ eq '--no-pipe-out') {$is_output_piped = 0}
	elsif ($_ eq '-?' || $_ eq '-h' || $_ eq '--help') {
		runx 'hsc2hs', '--help';
		say '';
		say '  --pipe-in      Read source from stdin';
		say '  --no-pipe-out  Prevent writing output to stdout';
		say '                 ("-o" or "--output" is required)';
		exit 0;
	} else {push @args_to_hsc2hs, $_}
}

# scoped here to prevent autoremoving temp file after condition ends
my $tmp_input_fh;

my $tmp_output_fh;

if ($is_input_piped) {
	$tmp_input_fh = File::Temp->new(SUFFIX => '.hsc');

	# redirect stdin to temporary file
	print $tmp_input_fh <STDIN>;

	# add temporary file path before all arguments
	unshift @args_to_hsc2hs, $tmp_input_fh->filename;
}

if ($is_output_piped) {
	$tmp_output_fh = File::Temp->new(SUFFIX => '.hs');

	# append temporary output file argument to arguments list
	push @args_to_hsc2hs, '-o', $tmp_output_fh->filename;
}

runx 'hsc2hs', @args_to_hsc2hs;
print <$tmp_output_fh> if defined $tmp_output_fh;
