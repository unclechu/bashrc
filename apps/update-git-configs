#!/usr/bin/env perl
use v5.10; use strict; use warnings;

use constant USAGE => '
USAGE
=====

-h, --help
	Show this message

-d, --download (default)
	git pull

-u, --upload
	git push
';

use autodie qw(:all);
no autodie 'system';

use Cwd qw(abs_path);
use Env qw(HOME CONFIGS_PATH);
use IPC::System::Simple qw(capturex);
use Term::ANSIColor qw(:constants);
use File::Glob qw(:bsd_glob);

$CONFIGS_PATH = "$HOME/.config/git-repos"
	if ! defined($CONFIGS_PATH) || $CONFIGS_PATH eq '';

$CONFIGS_PATH = abs_path $CONFIGS_PATH;

my $action = 'pull'; # default value

foreach (@ARGV) {
	if ($_ eq '-h' || $_ eq '--help') {say USAGE; exit 0}
	elsif ($_ eq '-d' || $_ eq '--download') {$action = 'pull'}
	elsif ($_ eq '-u' || $_ eq '--upload') {$action = 'push'}
	else {say STDERR qq/Unknown argument "$_"/; say STDERR USAGE; exit 1}
}

sub err {BOLD, WHITE, ON_RED, @_, RESET}
sub unit {YELLOW, @_, RESET}
sub action {CYAN, @_, RESET}
sub subaction {MAGENTA, @_, RESET}
sub notice {BLACK, ON_WHITE, @_, RESET}

sub fail {err('[X]'), ' ', @_, ' ', err('failed!')}

if (! -d $CONFIGS_PATH) {
	say STDERR err qq/Git-configs directory "$CONFIGS_PATH" doesn't exist/;
	exit 1;
}

chdir $CONFIGS_PATH;

my $unit;
my $full_path;
my $fork_pid;

while ($unit = <*>) {
	$full_path = "$CONFIGS_PATH/$unit";
	next if ! -d $full_path; # ignore if it's not a directory
	last if ($fork_pid = fork) == 0; # end loop for child process
	if (wait && $? != 0) {say err '[ NOT DONE ]'; exit 1}
}

# if it's main process
if ($fork_pid != 0) {
	say BOLD, WHITE, ON_GREEN, '[ DONE ]', RESET;
	exit 0;
}

chdir $full_path;

my @t;
my @t_unit = unit $unit;
my @t_for_unit = ('for "', @t_unit, '"');

if (capturex(qw/git status --porcelain/) ne '') {
	say STDERR 'Git repo "', @t_unit, '" ',
		err('have something to commit'), ' ',
		notice("(skipped $action)");
	exit 0;
}

sub title_it {@t = (@_, ' ', @t_for_unit); say @t, ' repo'}
sub notifail {say STDERR fail @t}

title_it action "Git $action";
notifail if system('git', $action) != 0;

title_it subaction 'Updating git submodules';
notifail if system(qw/git submodule update --init/) != 0;
notifail if system(qw/git submodule update/) != 0;

if (-f 'Makefile') {
	title_it subaction 'Building by "make" tool';
	notifail if system(qw/make --always-make/) != 0;
}
